# 인덱스

데이터를 조회할 때 테이블에 데이터가 적다면 결과가 금방 나오지만 데이터가 많아질수록 결과가 나오는 시간이 많이 소요된다. 인덱스는 이런 경우 결과가 나오는 시간을 대폭 줄여준다

## 인덱스 개념 이해하기

**인덱스(index)**란 책의 제일 뒤에 수록되는 ‘찾아보기’와 비슷한 개념.  
책의 내용 중 특정 단어를 찾고자 할 때, 책의 처음부터 마지막까지 한 페이지씩 전부 찾아보는 것은 상당히 시간이 오래 걸린다.  
그래서 찾아보기를 통해 먼저 해당 단어를 찾고 바로 옆에 적혀 있는 페이지로 이동하는 효율적인 방법 사용.

실습하는 데이터들은 양이 많지 않기 때문에 인덱스의 필요성을 느끼지 못할 수 있지만, 실무에서 많게는 수천만 ~ 수억 건 이상의 데이터를 처리 할 때 인덱스 없이 전체 데이터를 찾아본다는 것은 상상조차 할 수 없는 일이다.   
실제로 인덱스를 잘 활용하지 못한 시스템의 성능이 전체적으로 느려지는 일이 흔하게 발생한다.

## 인덱스 실습하기

### 01

MySQL를 실행 ‘root/0000’으로 접속 [File] - [Close Tab] 메뉴를 여러 번 실행해서 쿼리 창이 열려 있지 않은 상태로 만든다. 새로운 쿼리 창을 열기 위해 툴바에서 Create a new SQL tab for executing queries 아이콘 클릭 [SCHEMAS] 패널의  ‘shop_db’ 선택

### 02

회원 테이블에는 아직 인덱스를 만들지 않음.  
테이블에서 ‘아이유’를 찾을 때는 회원 테이블의 1행부터 끝까지 전체를 살펴봐야 한다

```sql
SELECT*FROM member WHERE member_name = '아이유';
```

### 03

결과는 당연히 아이유를 잘 찾았을 것이다. 아이유를 찾았는지 확인하기 위해 [Execution Plan(실행 계획)] 탭을 클릭 **Full Table Scan**이라고 나옴. 이것을 해석하면 **전체 테이블 검색** 정도. 처음부터 끝까지 엄청나게 오랜 시간이 걸려서 ‘아이유’를 찾은 것. 현재 인덱스가 없기 때문에 별다른 방법이 없다

### 04

이제 회원 테이블에 인덱스 만들기.  
다음 SQL을 실행하면 인덱스가 생성. 인덱스는 열에 지정. SQL의 마지막에 **ON member(member_name)** 의미 `mbmer` 테이블의 `member_naem` 열에 인덱스를 지정하라는 의미.  
결과는 특별히 눈에 보이지 않는다. 인덱스 생성 완료

```sql
CREATE INDEX idx_member_name ON member(member_name);
```

### 05

인덱스가 생긴 회원 테이블에서 아이유를 찾아보기. 

```sql
SELECT*FROM member WHERE member_name = '아이유';
```

결과는 동일, 방법은 달라졌다. [Execution Plan] 탭을 **Non-Unique Key Lookup**이라고 나옴. Key Lookup이라고 나온다. Key Lookup은 인덱스를 통해 결과를 찾았다고 기억하면 된다.  
이 방법을 **인덱스 검색(Index Scan)**

인덱스에서 한 가지 더 기억해야 할 점 인덱스 생성 여부에 따라 결과가 달라지는 것은 아니라는 것이다.  
책의 내용을 찾을 때 찾아보기가 잇으면 시간을 단축하는 효과는 있지만, 책의 찾아보기가 업어도 책의 첫페이지부터 찾아야 하기 때문에 시간이 오래 걸릴 뿐 어차피 동일하게 찾을 수 있다.

# 뷰

뷰는 테이블과 상당히 동일한 성격의 데이터베이스 개체.  
뷰를 활용하면 보안도 강화, SQL 문도 간단하게 사용.

## 뷰 개념 이해하기

**뷰(view)**를 한마디로 정의 ‘가상의 테이블’이라고 할 수 있다.   
일반 사용자의 입장에서는 테이블과 뷰를 구분할 수 없다. 즉, 일반 사용자는 테이블과 동일하게 뷰를 취급.  
다만 뷰는 실제 데이터를 가지고 있지 않으며, 진짜 테이블에 링크(link)된 개념.

뷰는 윈도우즈 운영체제 ‘바로 가기 아이콘’과 비슷한 개념.  
윈도우즈에서 바탕화면의 바로 가기 아이콘을 더블 클릭해서 실행, 실제로 실행되는 파일은 다른 폴더 있다.  
e.g. 바탕화면에 있는 크롬 블라우저의 바로 가기 아이콘은 C:\Program Files\Google\Chrome\application ****폴더의 chrome.exe와 연결.

바탕화면의 크롬 아이콘을 더블 클릭해서 프로그램이 실행된다고 생각해도 아무런 문제 없이 크롬을 잘 사용해 왔다. 굳이 복잡한 폴더 구조까지 생각하지 않아도 된다.

뷰도 비슷한 개념으로 실체는 없으며 태이브과 연결되어 있는 것 뿐.  
사용자가 뷰를 테이블처럼 생각해서 접근하면 알아서 테이블에 연결.

뷰의 실체는 무엇인가? 뷰의 실체는 바로 **SELECT** 문.

## 뷰 실습하기

### 01

MySQL를 실행 ‘root/0000’ 접속 [File] - [Close Tab] 메뉴를 여러 번 실행 쿼리 창이 열려 있지 않은 상태로 만든다. 새로운 쿼리 창을 열고 [SCHEMAS] 패널에서 ‘shop_db’

### 02

기본적인 뷰를 만들면, 회원 테이블과 연결되는 회원 뷰(member_view)를 만들기 위해 다음 SQL 실행.  
[OutPut] 패널에 초록색 체크 표시가 나타나면 SQL이 제대로 실행되었다는 의미.

```sql
CREATE VIEW member_view
AS
		SELECT*FROM member;
```

### 03

회원 테이블(member)이 아닌 회원 뷰(member_view)에 접근.  
뷰에 접근하는 것은 테이블에 접근하는 것과 동일. SQL을 실행하면 회원 테이블에 접근했을 때와 동일한 결과 나온다. 즉, 바탕 화면 크롬 바로 가기 아이콘을 더블 클릭하든, 직접 해당 폴더 chrome.exe 실행 크롬이 실행되는 것과 동일한 개념.

```sql
SELECT*FROM member_view;
```

테이블을 사용하지 않고 굳이 뷰를 사용하는 이유?

- 보안에 도움이 된다
- 긴 SQL 문을 간략하게 만든다

# 스토어드 프로시저

스토어드 프로시저를 통해 SQL 안에 일반 프로그래밍 언어처럼 코딩.  
비록 일반 프로그래밍보다는 좀 불편, 프로그래밍 로직 작성할 수 있어서 때론 유용하게 사용.

## 스토어드 프로시저 개념 이해하기

**스토어드 프로시저(stored procedure)란** MySQL에서 제공하는 **프로그래밍 기능,** 여러 개의 SQL 문을 하나로 묶어서 편리하게 사용할 수 있다. SQL을 묶는 개념 외, C, Java, Python과 같은 프로그래밍 언어에서 사용되는 연산식, 조건문, 반복문 등을 사용

스토어드 프로시저를 통해 MySQL에서도 기본적인 형태의 일반 프로그래밍 로직을 코딩할 수 있다.

## 스토어드 프로시저 실습

### 01

MySQL를 실행 ‘root/0000’으로 접속 [File] - [Close Tab] 메뉴를 여러 번 실행해서 쿼리 창이 열려 있지 않은 상태로 만듬. 새로운 쿼리 창을 열고 [SCHEMAS] 패널에서 ‘shop_db’ 선택

### 02

두 SQL을 입력하고 한꺼번에 실행. 별도의 탭으로 동시에 결과가 나온다. 이 두 SQL은 앞으로도 상당히 자주 사용된다고 가정. 매 번 두 줄의 SQL을 입력해야 한다면 상당히 불편할 것이고, SQl의 문법을 잊어버리거나 오타를 입력할 수도 있다. 지금은 두 줄 뿐이지만 훨씬 긴 SQL이라도 마찬가지

```sql
SELECT*FROM member WHERE member_name = '나훈아';
SELECT*FROM product WHERE product_name = '삼각김밥';
```

### 03

SQL을 하나의 스토어드 프로시저로 만들기.  
SQL을 입력 실행 첫 행과 마지막 행에 **구분 문자**라는 의미 **DELIMITER // ~ DELIMITER;** 문이 나왔다.  
스토어드 프로시저를 묶어주는 약속으로 생각. 그리고**BEGIN**과 **END** 사이에 SQL 문에 넣으면 된다.

```sql
DELIMITER //
CREATE PROCEDURE myProc() 
BEGIN
	SELECT*FROM member WHERE member_name = '나훈아';
	SELECT*FROM product WHERE product_name = '삼각김밥';
END //
DELIMITER;
```

### 04

두 줄의 SQL 문을 실행할 필요 없이 앞에서 만든 스토어드 프로시저를 호출하기 위해 **CALL문** 실행,  
다음 SQL 실행. 결과를 보면 두 SQL을 실행한 것과 동일한 것을 확인.

```sql
CALL myProc();
```

---

### CREATE문과 DROP 문

테이블,인덱스, 뷰, 스토어드 프로시저 등의 데이터베이스 개체를 만들기 위해 **CREATE 개체_종류 개체_이름 ~~** 형식을 사용. 반대 데이터베이스 개체를 삭제하기 위해 **DROP 개체_정류 개체_이름** 형식을 사용.  
e.g. 실습에서 생성한 스토어드 프로시저를 삭제 **DROP PROCEDURE myProc** 사용

MySQL 워크벤치에서 생성, 삭제하려면 먼저 [SCHEMAS] 패널의 빈 곳에서 마우스 오른 쪽 버튼 클릭하고 [RefreshAll]을 선택해서 새로 고침, 그리고 생성, 삭제할 데이터 베이스 개체에서 마우스 오른쪽 버튼을 클릭하고 생성하려면 [Create 데이터베이스_개체]를, 삭제하려면 [Drop 데이터베이스_개체] 서택.

---

데이터베이스 개체는 인덱스, 뷰, 스토어드 프로시저 외에 트리거, 스토어드 함수, 커서 등도 있다.

# 정리

- **인덱스** 책 뒤 ‘찾아보기’와 비슷한 개념.  
데이터를 빠르게 찾을 수 있도록 도와줌
- **뷰**는 ‘바로 가기 아이콘’과 비슷한 개념.  
한마디로 정의 ‘가상의 테이블’.
- **스토어드 프로시저**는 여러 개의 SQL을 묶어주거나, 프로그래밍 기능 제공

**관련 중요 용어**

| 한글 용어 | 영문 용어 | 설명 |
| --- | --- | --- |
| 데이터베이스 개체 | Database Object | 테이블, 뷰, 인덱스, 스토어드 프로시저 등 데이터베이스 안에 저장되는 개체 |
| 실행 계획 | Execution Plan | SQL을 실행할 때, 인덱스 사용여부 확인할 수 있는 워크벤치의 화면 |
| 전체 테이블 검색 | Full Table Scan | 테이블의 모든 데이터를 훑어서 원하는 데이터를 찾아내는 것을 말함. 책 전체를 찾아보는 것과 비슷함 |
| 인덱스 검색 | Index Scan | 인덱스를 통해서 데이터를 찾는 것을 말함. 책 뒤의 찾아보기를 사용한 것과 비슷함 |
| 구분 문자 | DELMITER | 스토어드 프러시저를 묶어주는 예약어 |
| 호출 | CALL | 스토어드 프로시저를 호출하는 예약어 |
| 개체 생성문 | CREATE | 데이터베이스 개체를 생성할 때 사용하는 예약어 |
| 개체 삭제문 | DROP | 데이터베이스 개체를 삭제할 때 사용하는 예약어 |